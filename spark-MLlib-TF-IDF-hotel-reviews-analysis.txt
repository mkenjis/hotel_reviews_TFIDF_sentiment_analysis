---- Feature extraction & Data Munging --------------

val df = spark.read.format("csv").option("header","true").option("inferSchema","true").option("quoteAll","true").load("hotel_reviews/tripadvisor_hotel_reviews.csv")

scala> df.printSchema
root
 |-- Review: string (nullable = true)
 |-- Rating: integer (nullable = true)
 
scala> df.select("Rating").distinct.show
+------+
|Rating|
+------+
|     1|
|     3|
|     5|
|     4|
|     2|
+------+
 
val rdd1 = df.rdd.map( x => x.toSeq.toArray )

val rdd = rdd1.map( x => x.map( y => y.toString ))

-- remove nonword characters (such as punctuation).
val nonWordSplit = rdd.flatMap(x => x(0).split("""\W+""").map(_.toLowerCase))
nonWordSplit.sample(true, 0.3, 42).take(100).mkString(",")
nonWordSplit.distinct.count   // 52715

-- filter out numbers and tokens that are words mixed with numbers
val regex = """[^0-9]*""".r
val filterNumbers = nonWordSplit.filter(token => regex.pattern.matcher(token).matches)
filterNumbers.sample(false, 0.3, 42).take(100).mkString("\n")
filterNumbers.distinct.count   // 49936

-- list highest occurrence of words to get an idea which stop words to be removed
val tokenCounts = filterNumbers.map(t => (t, 1)).reduceByKey(_ + _)
val orderingDesc = Ordering.by[(String, Int), Int](_._2)
tokenCounts.top(20)(orderingDesc).mkString("\n")

-- remove stop words
val stopwords = Set(
 "the","a","an","of","or","in","for","by","on","but", "is", "not", "with", "as", "was", "if",
 "they", "are", "this", "and", "it", "have", "from", "at", "my", "be", "that", "to", "so", "what"
)
val tokenCountsFilteredStopwords = tokenCounts.filter { case(k, v) => !stopwords.contains(k) }
tokenCountsFilteredStopwords.top(20)(orderingDesc).mkString("\n")

-- lists tokens greather one-character length
val tokenCountsFilteredSize = tokenCountsFilteredStopwords.filter { case (k, v) => k.size >= 2 }
tokenCountsFilteredSize.top(20)(orderingDesc).mkString("\n")

-- list least occurring terms in the corpus
val orderingAsc = Ordering.by[(String, Int), Int](-_._2)
tokenCountsFilteredSize.top(20)(orderingAsc).mkString("\n")

-- remove terms with only one-occurrence
val rareTokens = tokenCounts.filter{ case (k, v) => v < 2 }.map{ case (k, v) => k }.collect.toSet
val tokenCountsFilteredAll = tokenCountsFilteredSize.filter { case (k, v) => !rareTokens.contains(k) }
tokenCountsFilteredAll.top(20)(orderingAsc).mkString("\n")

tokenCountsFilteredAll.count
res24: Long = 25337

def tokenize(line: String): Seq[String] = {
 line.split("""\W+""")
 .map(_.toLowerCase)
 .filter(token => regex.pattern.matcher(token).matches)
 .filterNot(token => stopwords.contains(token))
 .filterNot(token => rareTokens.contains(token))
 .filter(token => token.size >= 2)
 .toSeq
}

rdd.flatMap(x => tokenize(x(0))).distinct.count
res27: Long = 25337

val sets = rdd.randomSplit(Array(0.7,0.3))
val trainSet = sets(0)
val testSet = sets(1)

val tokens = trainSet.map(x => tokenize(x(0)))
tokens.first.take(20)

---------------------------

import org.apache.spark.mllib.linalg.{ SparseVector => SV }
import org.apache.spark.mllib.feature.HashingTF
import org.apache.spark.mllib.feature.IDF

val dim = math.pow(2, 16).toInt
val hashingTF = new HashingTF(dim)

-- transform function of HashingTF maps each input document (that is, a sequence of tokens) to an MLlib Vector.
val tf = hashingTF.transform(tokens)
tf.cache

val v = tf.first.asInstanceOf[SV]
v.size
v.values.size
println(v.values.take(10).toSeq)
println(v.indices.take(10).toSeq)

-- compute the inverse document frequency for each term in the corpus
-- by creating a new IDF instance and calling fit with our RDD of term frequency
-- vectors as the input. We will then transform our term frequency vectors to TF-IDF
-- vectors through the transform function of IDF:

val idf = new IDF().fit(tf)
val tfidf = idf.transform(tf)
val v2 = tfidf.first.asInstanceOf[SV]
println(v2.values.size)
println(v2.values.take(10).toSeq)
println(v2.indices.take(10).toSeq)

---------------------

import org.apache.spark.mllib.regression.LabeledPoint

val zippedTrain = trainSet.zip(tfidf)
val train = zippedTrain.map{ case(text,vector) => LabeledPoint(text(1).toDouble-1,vector) }
train.cache

val testTf = testSet.map(x => hashingTF.transform(tokenize(x(0))))
val testTfIdf = idf.transform(testTf)

val zippedTest = testSet.zip(testTfIdf)
val test = zippedTest.map{ case(text,vector) => LabeledPoint(text(1).toDouble-1,vector) }
test.cache

---- MLlib logistic regression --------------

import org.apache.spark.mllib.classification.LogisticRegressionWithSGD
val numIterations = 100
val model = LogisticRegressionWithSGD.train(train, numIterations)

ERROR DataValidators: Classification labels should be 0 or 1. Found 12096 invalid labels

---- MLlib SVM regression --------------

import org.apache.spark.mllib.classification.SVMWithSGD
val numIterations = 100
val model = SVMWithSGD.train(trainSet, numIterations)

ERROR DataValidators: Classification labels should be 0 or 1. Found 12096 invalid labels

---- MLlib Multiclass logistic regression --------------

import org.apache.spark.mllib.classification.{LogisticRegressionModel, LogisticRegressionWithLBFGS}
val numIterations = 100
val model = new LogisticRegressionWithLBFGS().setNumClasses(5).run(train)

val validPredicts =  test.map(p => (model.predict(p.features),p.label))

validPredicts.take(20)
res19: Array[(Double, Double)] = Array((4.0,4.0), (4.0,4.0), (4.0,3.0), (0.0,0.0), (0.0,1.0), (4.0,4.0), (4.0,3.0), (3.0,2.0), (3.0,3.0), (3.0,0.0), (3.0,1.0), (3.0,3.0), (4.0,4.0), (4.0,1.0), (1.0,1.0), (4.0,3.0), (4.0,4.0), (3.0,2.0), (4.0,4.0), (2.0,3.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 3163
validPredicts.count                            // 6160
val accuracy = metrics.accuracy   // 0.513474025974026

metrics.confusionMatrix
res22: org.apache.spark.mllib.linalg.Matrix =
248.0  106.0  34.0   35.0   20.0
144.0  166.0  94.0   83.0   49.0
56.0   86.0   141.0  232.0  120.0
40.0   67.0   142.0  749.0  827.0
8.0    24.0   62.0   768.0  1859.0

---- MLlib Naive Bayes regression --------------

import org.apache.spark.mllib.classification.NaiveBayes
val model = NaiveBayes.train(train)

val validPredicts =  test.map(p => (model.predict(p.features),p.label))

validPredicts.take(20)
res24: Array[(Double, Double)] = Array((4.0,4.0), (4.0,4.0), (4.0,3.0), (0.0,0.0), (1.0,1.0), (4.0,4.0), (4.0,3.0), (3.0,2.0), (3.0,3.0), (1.0,0.0), (3.0,1.0), (3.0,3.0), (4.0,4.0), (0.0,1.0), (1.0,1.0), (4.0,3.0), (3.0,4.0), (3.0,2.0), (4.0,4.0), (2.0,3.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 3380
validPredicts.count                            // 6160
val accuracy = metrics.accuracy   // 0.5487012987012987

metrics.confusionMatrix
res27: org.apache.spark.mllib.linalg.Matrix =
213.0  144.0  39.0   32.0   15.0
90.0   191.0  114.0  104.0  37.0
9.0    87.0   130.0  297.0  112.0
15.0   64.0   126.0  837.0  783.0
9.0    31.0   62.0   610.0  2009.0
